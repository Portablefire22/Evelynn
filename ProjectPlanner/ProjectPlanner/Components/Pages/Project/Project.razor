@page "/Projects/Project/{projectId}"
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager
@using System.Globalization
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ProjectPlanner.Data
@using ProjectPlanner.Data.Projects
@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>@CurrentProject?.Name</PageTitle>

<div class="page">
    <div class="sidebar">
    </div>
    <div>
        @if (CurrentProject == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="d-flex flex-column">
                <div>
                    <h1 class="fw-bold">@CurrentProject.Name</h1>
                    <div class="d-flex flex-column text-muted">
                        <small>Created: @CurrentProject.Created.ToString(CultureInfo.CurrentCulture)</small>
                        @if (CurrentProject.Modified != null && CurrentProject.Modified?.Subtract(CurrentProject.Created).Milliseconds > 5)
                        {
                            <small>Last Modified: @CurrentProject.ModifiedOffset hours ago (@CurrentProject.Modified?.ToString())</small>
                            <small>Modified by: @(GetUser(CurrentProject.ModifiedBy))</small>
                        }
                        else if (CurrentProject.ModifiedBy != null)
                        { 
                            <small>Created by: @(GetUser(CurrentProject.ModifiedBy))</small>
                        }
                    </div>
                </div>
                <div class="order-2 mt-2">
                    <a class="btn btn-primary" href="/Projects/EditProject/@ProjectId">Edit</a>
                    <button class="btn btn-danger">Delete</button>
                </div>
            </div>
            <p>@CurrentProject.Description</p>
            <div>
                <hr/>
                <h2>Notes (@Notes.Length)</h2>
                @* No clue why relative urls dont work *@
                <a class="btn btn-primary" href=@($"Projects/Project/{ProjectId}/NewNote")>New Note</a>
                @foreach (var note in Notes)
                {
                    <div class="d-flex flex-column">
                        <a href=@($"Projects/Project/{ProjectId}/Notes/{note.Id}")>@note.Name</a>
                    </div>
                }
            </div>
            
            <div>
                <hr/>
                <h2>Gantt Charts(@Gantts.Length)</h2>
                <a class="btn btn-primary" href=@($"Projects/Project/{ProjectId}/NewGantt")>New Gantt</a>
                @foreach (var gantt in Gantts) 
                {
                    <div class="d-flex flex-column">
                        <a href=@($"Projects/Project/{ProjectId}/Gantts/{gantt.Id}")>@gantt.Name</a>
                    </div>
                }
            </div>
        }
    </div>
</div>


@code {
 
    [Parameter]
    public string ProjectId { get; set; }
    
    private ProjectModel? CurrentProject { get; set; }
    
    private NotesModel[] Notes { get; set; }
    private GanttModel[] Gantts { get; set; }

    private string? GetUser(string? uuid)
    {
        if (uuid == null) return null;

        var context = DbFactory.CreateDbContext();
        var user = context.Users.Find(uuid);
        return user?.UserName;
    }

    private async Task<NotesModel[]> GetNotes(ApplicationDbContext context, int id)
    {
        return await context.Notes.Where(x => x.ProjectId == id).ToArrayAsync();
    }
    private async Task<GanttModel[]> GetGantts(ApplicationDbContext context, int id)
    {
        return await context.Gantts.Where(x => x.ProjectId == id).ToArrayAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        
        var authState = await AuthState.GetAuthenticationStateAsync();
        var uuid = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (uuid == null) return;
        if (!int.TryParse(ProjectId, out var id)) return;

        var model = await context.UserProjects.FirstOrDefaultAsync(x => x.ProjectId == id && x.UserId == uuid);
        if (model == null) return;

        Notes = await GetNotes(context, id);
        Gantts = await GetGantts(context, id);
        
        CurrentProject = context.Projects.FirstOrDefault(x => x.Id == int.Parse(ProjectId));
    }
}