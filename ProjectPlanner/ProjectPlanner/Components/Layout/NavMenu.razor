@using System.Security.Claims
@using System.Text.RegularExpressions
@using Microsoft.EntityFrameworkCore
@using ProjectPlanner.Data
@using ProjectPlanner.Data.Projects
@implements IDisposable

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Evelynn</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        


        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Projects/All">
                        <span class="bi bi-journal-book-fill-nav-menu" aria-hidden="true"></span>Projects
                    </NavLink>
                </div>
                @* *@
                @* @if (_currentProject != null) *@
                @* { *@
                @*     <div class="nav-item px-3"> *@
                @*         <NavLink class="nav-link" href=@($"Projects/Project/{_currentProject.Id}")> *@
                @*             <span class="bi bi-journal-book-fill-nav-menu" aria-hidden="true"></span> @_currentProject.Name *@
                @*         </NavLink> *@
                @*     </div> *@
                @* } *@
                <hr/>
                @if (_projects != null)
                {
                    foreach (var project in _projects)
                    { 
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href=@($"Projects/Project/{project.Id}")>
                                <span class="bi bi-journal-book-fill-nav-menu" aria-hidden="true"></span> @project.Name
                            </NavLink>
                        </div>
                    }
                }

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Projects/CreateProject">
                        <span class="bi bi-pencil-nav-menu" aria-hidden="true"></span>New Project
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken/>
                        <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>

            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    private ProjectModel[]? _projects;
    private ProjectModel? _currentProject;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        await GetProjects();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void GetProject()
    {
        // Currently you should only be able to get to these URLS by being authenticated
        // So surely this should be fine?
        
        // Get the project ID if there is one
        var pattern = @"(?<=Project\/)(.*?)(?=\/|$)";
        var rg = new Regex(pattern);
        var val = rg.Match(currentUrl).Value;
        if (!int.TryParse(val, out var cur))
        {
            return;
        }

        using var context = DbFactory.CreateDbContext();
        _currentProject = context.Projects.FirstOrDefault(x => x.Id == cur);
    }

    private async Task GetProjects()
    {
        var context = await DbFactory.CreateDbContextAsync();
        
        var authState = await AuthState.GetAuthenticationStateAsync();
        var uuid = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (uuid == null) return;

        var userProjects = context.UserProjects.Where(x => x.UserId == uuid).Select(x => x.ProjectId);
        _projects = await context.Projects.Where(x => userProjects.Contains(x.Id)).ToArrayAsync();
    }
    
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        _ = GetProjects();
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}