@page "/Projects/CreateProject"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ProjectPlanner.Data
@using ProjectPlanner.Data.Projects
@attribute [Authorize]
@inject ILogger<CreateProject> Logger
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager
<PageTitle>New Project</PageTitle>

<div class="card mx-auto" style="width: 50rem;">
    <div class="card-header">
        <h3>New Project</h3>
    </div>
    <EditForm class="p-3" Model="Project" FormName="create-project-form" OnValidSubmit="OnSubmit">
        <div class="mb-3">
            <label for="projectNameInput">Project Name</label>
            <InputText type="text" formaction="/api/Project/new-project" class="form-control" 
                   @bind-value="Project!.Name" id="projectNameInput" placeholder="Enter project name"/>
        </div>
        <div class="mb-3">
            <label for="projectDescriptionInput">Project Description</label>
            <InputText type="text" class="form-control" id="projectDescriptionInput"
                       @bind:event="oninput"
                       @bind-Value:get="Project!.Description" @bind-Value:set="OnDescriptionInput" placeholder="A short description of your project"/>
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private ProjectModel? Project { get; set; }

    private async Task OnSubmit()
    {
        if (Project == null) return;
        var context = await DbFactory.CreateDbContextAsync();
        Project.Created = DateTime.Now;

        var authState = await AuthState.GetAuthenticationStateAsync();
        var uuid = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (uuid == null) return;
        
        Project.ModifiedBy = uuid;
        context.Projects.Add(Project);

        await context.SaveChangesAsync();

        var userProj = new UserProjectsModel()
        {
            UserId = uuid,
            ProjectId = Project.Id,
            Capabilities = 3
        };

        await context.UserProjects.AddAsync(userProj);
        await context.SaveChangesAsync();
        
        NavManager.NavigateTo($"/Projects/Project/{Project.Id}");
    }
    
    private void OnDescriptionInput(string? value)
    {
        if (value == null)
        {
            Project!.Description = null;
            return;
        }
        Project!.Description = value.Length > 0 ? value : null;
    }
    
    protected override void OnInitialized()
    {
        Project ??= new();
    }

}