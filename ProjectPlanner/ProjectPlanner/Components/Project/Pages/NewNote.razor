@page "/Projects/Project/{ProjectId}/NewNote"
@using System.Security.Claims
@using BlazorBootstrap
@using Microsoft.EntityFrameworkCore
@using ProjectPlanner.Data
@using ProjectPlanner.Data.Projects
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager
@attribute [StreamRendering]
<PageTitle>New Note</PageTitle>

<div class="card mx-auto" style="width: 90%; ">
    <div class="card-header">
        <h3>New Note</h3>
    </div>
    <EditForm class="p-3" Model="Note" FormName="create-note-form" OnValidSubmit="OnSubmit">
        <div class="mb-3">
            <label for="noteNameInput">Note Name</label>
            <InputText type="text" formaction="/api/Note/new-note" class="form-control" 
                   @bind-value="Note!.Name" id="noteNameInput" placeholder="Enter Note name"/>
        </div>
        <div class="mb-3">
            <label for="noteDescriptionInput">Contents</label>
            <div class="d-flex flex-row">
                <InputTextArea type="text" class="form-control" id="noteDescriptionInput" 
                               @bind:event="oninput"
                               rows="20"
                               @bind-Value="Contents" placeholder="Note contents..."/>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }
    [SupplyParameterFromForm]
    private NotesModel? Note { get; set; }

    [SupplyParameterFromForm] public string? Contents { get; set; }

    private async Task OnSubmit()
    {
        if (Note == null) return;
        var context = await DbFactory.CreateDbContextAsync();

        var authState = await AuthState.GetAuthenticationStateAsync();
        var uuid = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (uuid == null) return;
        if (!int.TryParse(ProjectId, out var id)) return;

        Note.ProjectId = id;
        Note.Created = DateTime.Now;
        Note.ModifiedBy = uuid;
        context.Notes.Add(Note);

        
        await context.SaveChangesAsync();

        var filePath = $"Storage/Notes/{ProjectId}-{Note.Id}";
        context.Notes.Update(Note);

        Note.FilePath = filePath;
        await File.WriteAllTextAsync($"Storage/Notes/{ProjectId}-{Note.Id}", Contents);
        
        await context.SaveChangesAsync();
        
        NavManager.NavigateTo($"/Projects/Project/{ProjectId}/Notes/{Note.Id}");
    }
    
    private void OnDescriptionInput(string? value)
    {
        if (value == null)
        {
            Contents = null;
            return;
        }
        Contents = value.Length > 0 ? value : null;
    }
    
    protected override void OnInitialized()
    {
        Note ??= new();
    }

}
