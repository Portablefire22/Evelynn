@page "/Projects/Project/{projectId}"
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager
@using System.Globalization
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using ProjectPlanner.Client.Models
@inject HttpClient Client
@inject ILogger<Project> Logger

@rendermode InteractiveWebAssembly

@attribute [Authorize]

<PageTitle>@CurrentProject?.Name</PageTitle>

<div class="page">
    <div class="sidebar">
    </div>
    <div>
        @if (CurrentProject == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="d-flex flex-column">
                <div>
                    <h1 class="fw-bold">@CurrentProject.Name</h1>
                    <div class="d-flex flex-column text-muted">
                        <small>Created: @CurrentProject.Created.ToString(CultureInfo.CurrentCulture)</small>
                        @if (CurrentProject.Modified != null && CurrentProject.Modified?.Subtract(CurrentProject.Created).Milliseconds > 5)
                        {
                            <small>Last Modified: @GetOffset(CurrentProject.Modified.Value) hours ago (@CurrentProject.Modified?.ToString())</small>
                            <small>Modified by: @modifierUser</small>
                        }
                        else
                        { 
                            <small>Created by: @modifierUser</small>
                        }
                    </div>
                </div>
                <div class="order-2 mt-2">
                    <a class="btn btn-primary" href="/Projects/EditProject/@ProjectId">Edit</a>
                    <button class="btn btn-danger" @onclick="Delete">Delete</button>
                </div>
            </div>
            <p>@CurrentProject.Description</p>
            <div>
                <hr/>
                <h2>Notes (@Notes.Length)</h2>
                @* No clue why relative urls dont work *@
                <a class="btn btn-primary" href=@($"Projects/Project/{ProjectId}/NewNote")>New Note</a>
                @foreach (var note in Notes)
                {
                    <div class="d-flex flex-column">
                        <a href=@($"Projects/Project/{ProjectId}/Notes/{note.Id}")>@note.Name</a>
                    </div>
                }
            </div>
            
            <div>
                <hr/>
                <h2>Gantt Charts(@Gantts.Length)</h2>
                <a class="btn btn-primary" href=@($"Projects/Project/{ProjectId}/NewGantt")>New Gantt</a>
                @foreach (var gantt in Gantts) 
                {
                    <div class="d-flex flex-column">
                        <a href=@($"Projects/Project/{ProjectId}/Gantts/{gantt.Id}")>@gantt.Name</a>
                    </div>
                }
            </div>
        }
    </div>
</div>


@code {
 
    [Parameter]
    public string ProjectId { get; set; }
    
    private ProjectDTO? CurrentProject { get; set; }

    private string modifierUser = ""; 
    
    private NoteDTO[]? Notes { get; set; }
    private GanttDTO[]? Gantts { get; set; }

    private double GetOffset(DateTime mod)
    {
        return double.Round(DateTime.Now.Subtract(mod).TotalHours, 1);
    }

    private async Task<string> GetUser(string? uuid)
    {
        var resp = await Client.GetAsync($"api/User/{uuid}");
        var username = await resp.Content.ReadAsStringAsync();
        return username.Length > 0 ? username : "[deleted]";
    }

    public async Task Delete()
    {
        var resp = await Client.PutAsync($"api/Project/DeleteProject/{ProjectId}", null);
        if (!resp.IsSuccessStatusCode) return;
        NavManager.NavigateTo("/Projects/All");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        CurrentProject = await Client.GetFromJsonAsync<ProjectDTO>($"api/Project/{ProjectId}");
        if (CurrentProject == null) return;

        modifierUser = await GetUser(CurrentProject.ModifiedBy);
        Notes = await Client.GetFromJsonAsync<NoteDTO[]>($"api/Project/{ProjectId}/Notes");
        Gantts = await Client.GetFromJsonAsync<GanttDTO[]>($"api/Project/{ProjectId}/Gantt");
        if (Notes == null) Notes = new NoteDTO[0];
        if (Gantts == null) Gantts = new GanttDTO[0];
        StateHasChanged();
    }
}